name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/imageconverter
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      id: restore
      run: dotnet restore
      continue-on-error: true

    - name: Notify on restore failure
      if: steps.restore.outcome == 'failure'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "ðŸš« <b>Build Failed</b>\n\n<b>Project:</b> ImageConverter\n<b>Branch:</b> ${{ github.ref_name }}\n<b>Commit:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a>\n\n<b>Author:</b> ${{ github.actor }}\n<b>Commit Message:</b> ${{ github.event.head_commit.message }}\n\n<b>Error:</b> Failed to restore dependencies"
          }'
    
    - name: Build
      id: build
      if: steps.restore.outcome == 'success'
      run: dotnet build --no-restore
      continue-on-error: true

    - name: Notify on build failure
      if: steps.build.outcome == 'failure'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "ðŸš« <b>Build Failed</b>\n\n<b>Project:</b> ImageConverter\n<b>Branch:</b> ${{ github.ref_name }}\n<b>Commit:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a>\n\n<b>Author:</b> ${{ github.actor }}\n<b>Commit Message:</b> ${{ github.event.head_commit.message }}\n\n<b>Error:</b> Build failed"
          }'
    
    - name: Test
      id: test
      if: steps.build.outcome == 'success'
      run: dotnet test --no-build --verbosity normal
      continue-on-error: true

    - name: Notify on test failure
      if: steps.test.outcome == 'failure'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "ðŸš« <b>Tests Failed</b>\n\n<b>Project:</b> ImageConverter\n<b>Branch:</b> ${{ github.ref_name }}\n<b>Commit:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a>\n\n<b>Author:</b> ${{ github.actor }}\n<b>Commit Message:</b> ${{ github.event.head_commit.message }}\n\n<b>Error:</b> Tests failed"
          }'

    - name: Notify on success
      if: steps.test.outcome == 'success'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "âœ… <b>Build and Tests Passed</b>\n\n<b>Project:</b> ImageConverter\n<b>Branch:</b> ${{ github.ref_name }}\n<b>Commit:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a>\n\n<b>Author:</b> ${{ github.actor }}\n<b>Commit Message:</b> ${{ github.event.head_commit.message }}\n\n<b>Status:</b> All tests passed successfully"
          }'

  build-docker:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    container:
      image: quay.io/buildah/stable:latest
      options: --privileged
    
    steps:
    - name: Login to Docker Hub
      id: docker-login
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | buildah login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin docker.io
      continue-on-error: true

    - name: Notify on Docker Hub login failure
      if: steps.docker-login.outcome == 'failure'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "ðŸš« <b>Docker Hub Login Failed</b>\n\n<b>Project:</b> ImageConverter\n<b>Branch:</b> ${{ github.ref_name }}\n<b>Commit:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a>\n\n<b>Author:</b> ${{ github.actor }}\n<b>Commit Message:</b> ${{ github.event.head_commit.message }}\n\n<b>Error:</b> Failed to login to Docker Hub. Please check credentials."
          }'

    - name: Build and push Docker image
      id: docker-build
      if: steps.docker-login.outcome == 'success'
      run: |
        buildah build -f $GITHUB_WORKSPACE/Dockerfile -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} -t ${{ env.DOCKER_IMAGE }}:latest $GITHUB_WORKSPACE
        buildah push ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        buildah push ${{ env.DOCKER_IMAGE }}:latest
      continue-on-error: true

    - name: Notify on Docker build failure
      if: steps.docker-build.outcome == 'failure'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "ðŸš« <b>Docker Build Failed</b>\n\n<b>Project:</b> ImageConverter\n<b>Branch:</b> ${{ github.ref_name }}\n<b>Commit:</b> <a href=\"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}\">${{ github.sha }}</a>\n\n<b>Author:</b> ${{ github.actor }}\n<b>Commit Message:</b> ${{ github.event.head_commit.message }}\n\n<b>Error:</b> Failed to build or push Docker image"
          }'

    - name: Notify deployment success
      if: steps.docker-build.outcome == 'success'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -H "Content-Type: application/json" \
          -d '{
            "chat_id": "${{ env.TELEGRAM_CHAT_ID }}",
            "parse_mode": "HTML",
            "text": "ðŸš€ <b>Docker Image Published</b>\n\n<b>Project:</b> ImageConverter\n<b>Image:</b> ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}\n<b>Latest:</b> ${{ env.DOCKER_IMAGE }}:latest\n\n<b>Status:</b> Image successfully published to Docker Hub"
          }'
